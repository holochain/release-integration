use integration::{CargoWorkspaceModel, ChangelogConfig, CrateModel, TestHarness};

/// Set the version of a simple library crate.
///
/// With this test, we get:
/// - The version can be set to the value generated by git-cliff in a library.
/// - A commit and tag are created for the version.
#[test]
fn set_version_simple_library() {
    let harness = TestHarness::new("set-version-library");

    //
    // Initialize the repository
    //
    harness.add_standard_gitignore();
    harness.write_file_content("README.md", "# set version library");
    harness.commit("README.md", "chore: Add README");
    harness.push_branch("main");

    //
    // Add Rust source code
    //
    let new_crate = CrateModel::new("test_v", "0.0.1")
        .make_lib()
        .with_description("A test versioned crate")
        .with_repository(harness.repository_url().as_str())
        .with_license("Apache-2.0");

    harness.add_crate(new_crate);
    harness.verify_cargo_project(".");
    harness.commit("*", "chore: Add crate");
    harness.push_branch("main");

    //
    // Generate the initial changelog
    //
    let version =
        harness.generate_changelog(ChangelogConfig::Pre1Point0Cliff, Some("v0.1.0".to_string()));
    assert_eq!(version, "v0.1.0");

    //
    // Set the crate version
    //
    harness.set_version(&version, false);
    harness.check_index_clean();
    harness.push_branch("main");
    harness.push_tag("v0.1.0");

    //
    // Check the version in the Cargo.toml
    //
    let cargo_toml = harness.read_file_content("Cargo.toml");
    assert!(
        cargo_toml.contains("version = \"0.1.0\""),
        "Cargo.toml does not contain the expected version"
    );

    //
    // Make a simple change to the library
    //
    harness.write_file_content("src/lib.rs", "fn add(a: i32, b: i32) -> i32 { a + b }");
    harness.commit("src/lib.rs", "chore: Add add function");
    harness.push_branch("main");

    //
    // Generate the changelog for the new version
    //
    let version = harness.generate_changelog(ChangelogConfig::Pre1Point0Cliff, None);
    assert_eq!(version, "v0.1.1");

    //
    // Set the new version
    //
    harness.set_version(&version, false);
    harness.check_index_clean();
    harness.push_branch("main");
    harness.push_tag("v0.1.1");

    //
    // Check the version in the Cargo.toml
    //
    let cargo_toml = harness.read_file_content("Cargo.toml");
    assert!(
        cargo_toml.contains("version = \"0.1.1\""),
        "Cargo.toml does not contain the expected version"
    );

    //
    // Make another change to the library and this time call it a feature
    //
    harness.write_file_content(
        "src/lib.rs",
        r#"fn add(a: i32, b: i32) -> i32 { a + b }
fn subtract(a: i32, b: i32) -> i32 { a - b }
"#,
    );
    harness.commit("src/lib.rs", "feat: Add subtract function");
    harness.push_branch("main");

    //
    // Generate the changelog and force a new version
    //
    let version =
        harness.generate_changelog(ChangelogConfig::Pre1Point0Cliff, Some("v0.2.0".to_string()));
    assert_eq!(version, "v0.2.0");

    //
    // Set the new version
    //
    harness.set_version(&version, false);
    harness.check_index_clean();
    harness.push_branch("main");
    harness.push_tag("v0.2.0");

    //
    // Check the version in the Cargo.toml
    //
    let cargo_toml = harness.read_file_content("Cargo.toml");
    assert!(
        cargo_toml.contains("version = \"0.2.0\""),
        "Cargo.toml does not contain the expected version"
    );
}

/// A workspace that needs to produce both release and pre-release versions.
///
/// With this test, we get:
/// - Version bumps in a workspace respect the workspace version.
#[test]
fn set_versions_workspace() {
    let harness = TestHarness::new("set-version-workspace");

    //
    // Initialize the repository
    //
    harness.add_standard_gitignore();
    harness.write_file_content("README.md", "# set version workspace");
    harness.commit("README.md", "chore: Add README");
    harness.push_branch("main");

    //
    // Add Rust source code
    //
    let lib_crate = CrateModel::new("test_lib_v", "0.1.0")
        .make_lib()
        .with_description("A test versioned lib crate")
        .with_repository(harness.repository_url().as_str())
        .with_license("Apache-2.0");

    let bin_crate = CrateModel::new("test_binv", "")
        .with_description("A test versioned bin crate")
        .with_repository(harness.repository_url().as_str())
        .with_license("Apache-2.0");

    let workspace = CargoWorkspaceModel::default()
        .add_crate(lib_crate, &[])
        .add_crate(bin_crate, &[]);

    harness.add_workspace(workspace);
    harness.verify_cargo_project("crates/test_lib_v");
    harness.verify_cargo_project("crates/test_binv");
    harness.commit("*", "chore: Add workspace");
    harness.push_branch("main");

    //
    // Generate the initial changelog
    //
    let version = harness.generate_changelog(ChangelogConfig::Pre1Point0Cliff, None);
    assert_eq!(version, "v0.1.0");
    harness.commit("CHANGELOG.md", "chore: Update changelog for v0.1.0");
    harness.push_branch("main");

    //
    // Set the workspace version
    //
    harness.set_version(&version, false);
    harness.check_index_clean();
    harness.push_branch("main");
    harness.push_tag("v0.1.0");

    //
    // Check the version in the Cargo.toml of the workspace
    //
    let cargo_toml = harness.read_file_content("Cargo.toml");
    assert!(
        cargo_toml.contains("version = \"0.1.0\""),
        "Cargo.toml does not contain the expected version"
    );

    //
    // Update the library and binary crates
    //
    harness.write_file_content(
        "crates/test_lib_v/src/lib.rs",
        "pub fn add(a: i32, b: i32) -> i32 { a + b }",
    );
    harness.commit(
        "crates/test_lib_v/",
        "chore: Add add function to test_lib_v",
    );

    harness.write_file_content(
        "crates/test_binv/src/main.rs",
        r#"fn main() { println!("Hello from test_bin!"); }"#,
    );
    harness.commit(
        "crates/test_binv/",
        "chore: Update main function in test_binv",
    );

    harness.verify_cargo_project("");
    harness.push_branch("main");

    //
    // Generate changelog
    //
    let version = harness.generate_changelog(
        ChangelogConfig::Pre1Point0Cliff,
        Some("v0.2.0-dev.0".to_string()),
    );
    assert_eq!(version, "v0.2.0-dev.0");
    harness.commit("CHANGELOG.md", "chore: Update changelog for v0.2.0-dev.0");
    harness.push_branch("main");

    //
    // Set the new version
    //
    harness.set_version(&version, false);
    harness.check_index_clean();
    harness.verify_cargo_project("");
    harness.push_branch("main");
    harness.push_tag("v0.2.0-dev.0");

    //
    // Check the version in the Cargo.toml of the workspace
    //
    let cargo_toml = harness.read_file_content("Cargo.toml");
    assert!(
        cargo_toml.contains("version = \"0.2.0-dev.0\""),
        "Cargo.toml does not contain the expected version"
    );

    //
    // Make a change to just the library crate
    //
    harness.write_file_content(
        "crates/test_lib_v/src/lib.rs",
        "pub fn add(a: i32, b: i32) -> i32 { a + b }\npub fn add2(a: i32, b: i32) -> i32 { a + b }",
    );
    harness.commit(
        "crates/test_lib_v/",
        "chore: Add add2 function to test_lib_v",
    );
    harness.push_branch("main");

    //
    // Generate the changelog for the new version
    //
    let version = harness.generate_changelog(ChangelogConfig::Pre1Point0Cliff, None);
    assert_eq!(version, "v0.2.0-dev.1");
    harness.commit("CHANGELOG.md", "chore: Update changelog for v0.2.0-dev.1");
    harness.push_branch("main");

    //
    // Set the new version
    //
    harness.set_version(&version, false);
    harness.check_index_clean();
    harness.verify_cargo_project("");
    harness.push_branch("main");
    harness.push_tag("v0.2.0-dev.1");

    //
    // Make a change to just the library crate
    //
    harness.write_file_content(
        "crates/test_lib_v/src/lib.rs",
        "/// Add two numbers\npub fn add(a: i32, b: i32) -> i32 { a + b }\n/// Also add two numbers\npub fn add2(a: i32, b: i32) -> i32 { a + b }",
    );
    harness.commit(
        "crates/test_lib_v/",
        "docs: Add documentation to add and add2 functions in test_lib_v",
    );
    harness.push_branch("main");

    //
    // Switch to a release version
    //
    let version =
        harness.generate_changelog(ChangelogConfig::Pre1Point0Cliff, Some("v0.2.0".to_string()));
    assert_eq!(version, "v0.2.0");
    harness.commit("CHANGELOG.md", "chore: Update changelog for v0.2.0");
    harness.push_branch("main");

    //
    // Set the new version
    //
    harness.set_version(&version, false);
    harness.check_index_clean();
    harness.verify_cargo_project("");
    harness.push_branch("main");
    harness.push_tag("v0.2.0");

    //
    // Check the version in the Cargo.toml of the workspace
    //
    let cargo_toml = harness.read_file_content("Cargo.toml");
    assert!(
        cargo_toml.contains("version = \"0.2.0\""),
        "Cargo.toml does not contain the expected version"
    );

    //
    // Check that the workspace versions haven't been touched in the crate manifests
    //
    let lib_cargo_toml = harness.read_file_content("crates/test_lib_v/Cargo.toml");
    assert!(
        lib_cargo_toml.contains("version.workspace = true"),
        "test_lib_v Cargo.toml does not reference the workspace version"
    );
    let bin_cargo_toml = harness.read_file_content("crates/test_binv/Cargo.toml");
    assert!(
        bin_cargo_toml.contains("version.workspace = true"),
        "test_binv Cargo.toml does not reference the workspace version"
    );
}
