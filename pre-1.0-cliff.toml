# git-cliff configuration file, see: https://git-cliff.org/docs/configuration

[changelog]
header = """
# Changelog

All notable changes to this project will be documented in this file.

This project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n
"""

body = """
{% if version -%}
    ## \\[[{{ version | trim_start_matches(pat="v") }}]\\] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## \\[[Unreleased]\\]
{% endif -%}
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | upper_first }}\n
    {% for commit in commits | filter(attribute="scope") | sort(attribute="scope") -%}
        - {% if commit.breaking %}\\[**BREAKING**\\] {% endif %}*({{ commit.scope }})* {{ commit.message | upper_first }}\
          {% if commit.remote.username %} by @{{ commit.remote.username }}{% endif %}\
          {% if commit.remote.pr_number %} in [#{{ commit.remote.pr_number }}](https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}/pull/{{ commit.remote.pr_number }}){% endif %}
          {% if commit.body %}
              {%- for line in commit.body | split(pat="\n\n") %}
                  {%- raw %}  {% endraw %}- {{ line | replace(from="\n", to=" ") | upper_first }}
              {% endfor -%}
          {% endif -%}
          {% if commit.breaking and commit.breaking_description != commit.message %}
          {%- raw %}  {% endraw %}- **Breaking Change**: {{ commit.breaking_description | upper_first }}
          {% endif -%}
    {% endfor -%}
    {% for commit in commits -%}
        {%- if commit.scope -%}
        {% else -%}
        - {% if commit.breaking %}\\[**BREAKING**\\] {% endif %}{{ commit.message | upper_first }}\
          {% if commit.remote.username %} by @{{ commit.remote.username }}{% endif %}\
          {% if commit.remote.pr_number %} in [#{{ commit.remote.pr_number }}](https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}/pull/{{ commit.remote.pr_number }}){% endif %}
          {% if commit.body %}
              {%- for line in commit.body | split(pat="\n\n") %}
                  {%- raw %}  {% endraw %}- {{ line | replace(from="\n", to=" ") | upper_first }}
              {% endfor -%}
          {% endif -%}
          {% if commit.breaking and commit.breaking_description != commit.message %}
          {%- raw %}  {% endraw %}- **Breaking Change**: {{ commit.breaking_description | upper_first }}
          {% endif -%}
        {% endif -%}
    {% endfor -%}
{% endfor -%}
{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
{%- if loop.first %}
    ### First-time Contributors
{% endif %}
  - @{{ contributor.username }} made their first contribution\
    {% if contributor.pr_number %} in [#{{ contributor.pr_number }}](https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}/pull/{{ contributor.pr_number }}){% endif -%}
{% endfor %}\n
"""

footer = """
{% for release in releases -%}
    {%- if loop.first %}\n{% endif -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: \
                https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
                    /compare/{{ release.previous.version }}..{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}\
            /compare/{{ release.previous.version }}..HEAD
    {% endif -%}
{% endfor %}
<!-- generated by git-cliff -->
"""
# Remove the leading and trailing whitespace from the templates
trim = true

[git]
# Parse commits based on https://www.conventionalcommits.org
conventional_commits = true
# Do not filter out the commits that are not conventional
filter_unconventional = false
# Regex for parsing and grouping commits
commit_parsers = [
    { field = "author.name", pattern = "dependabot\\[bot\\]", group = "<!-- 10 -->Automated Changes"},
    { field = "author.name", pattern = "github-actions\\[bot\\]", group = "<!-- 10 -->Automated Changes"},
    { field = "author.name", pattern = "holochain-release-automation[0-9]*", group = "<!-- 10 -->Automated Changes"},
    { message = "^feat", group = "<!-- 00 -->Features" },
    { message = "^fix", group = "<!-- 01 -->Bug Fixes" },
    { message = "^perf", group = "<!-- 02 -->Performance" },
    { message = "^chore\\(release\\)", skip = true }, # Don't show version bumps etc. in changelog
    { message = "^chore", group = "<!-- 03 -->Miscellaneous Tasks" },
    { message = "^build", group = "<!-- 04 -->Build System" },
    { message = "^ci", group = "<!-- 05 -->CI" },
    { message = "^test", group = "<!-- 06 -->Testing" },
    { message = "^refactor", group = "<!-- 07 -->Refactor" },
    { message = "^style", group = "<!-- 08 -->Styling" },
    { message = "^docs", group = "<!-- 09 -->Documentation"},
]
# Do not filter out the commits that are not matched by commit parsers
filter_commits = false
# Do not sort the tags topologically, therefore sort chronologically. See: https://git-cliff.org/blog/page/2#--topo-order
topo_order = false
# Show the newest commits in each section first
sort_commits = "newest"

[bump]
# Want to use a `v` prefix, so set the initial tag and git-cliff will respect it after that
initial_tag = "v0.1.0"

# For these, this is how we want to work with crates that have a `0.x.y` version.
features_always_bump_minor = false
breaking_always_bump_major = false
